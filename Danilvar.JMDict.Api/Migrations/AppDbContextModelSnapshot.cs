// <auto-generated />
using System;
using System.Collections.Generic;
using Danilvar.JMDict.Api.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Danilvar.JMDict.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("ru_RU.utf8")
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "hstore");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Danilvar.JMDict.Api.Entities.Gloss", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<string>("Lang")
                        .HasColumnType("text");

                    b.Property<Guid?>("SenseId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SenseId" }, "IX_Glosses_SenseId");

                    b.ToTable("Glosses");
                });

            modelBuilder.Entity("Danilvar.JMDict.Api.Entities.JmdictData", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool?>("CommonOnly")
                        .HasColumnType("boolean");

                    b.Property<List<string>>("DictRevisions")
                        .HasColumnType("text[]");

                    b.Property<List<string>>("Languages")
                        .HasColumnType("text[]");

                    b.Property<Dictionary<string, string>>("Tags")
                        .HasColumnType("hstore");

                    b.Property<string>("Version")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("JMDictDatas", (string)null);
                });

            modelBuilder.Entity("Danilvar.JMDict.Api.Entities.Kana", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<List<string>>("AppliesToKanji")
                        .HasColumnType("text[]");

                    b.Property<bool?>("Common")
                        .HasColumnType("boolean");

                    b.Property<List<string>>("Tags")
                        .HasColumnType("text[]");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<string>("WordId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "WordId" }, "IX_Kana_WordId");

                    b.ToTable("Kana", (string)null);
                });

            modelBuilder.Entity("Danilvar.JMDict.Api.Entities.Kanji", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool?>("Common")
                        .HasColumnType("boolean");

                    b.Property<List<string>>("Tags")
                        .HasColumnType("text[]");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<string>("WordId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "WordId" }, "IX_Kanji_WordId");

                    b.ToTable("Kanji", (string)null);
                });

            modelBuilder.Entity("Danilvar.JMDict.Api.Entities.Sense", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<List<string>>("Antonym")
                        .HasColumnType("text[]");

                    b.Property<List<string>>("AppliesToKana")
                        .HasColumnType("text[]");

                    b.Property<List<string>>("AppliesToKanji")
                        .HasColumnType("text[]");

                    b.Property<List<string>>("Dialect")
                        .HasColumnType("text[]");

                    b.Property<List<string>>("Field")
                        .HasColumnType("text[]");

                    b.Property<List<string>>("Info")
                        .HasColumnType("text[]");

                    b.Property<List<string>>("LanguageSource")
                        .HasColumnType("text[]");

                    b.Property<List<string>>("Misc")
                        .HasColumnType("text[]");

                    b.Property<List<string>>("PartOfSpeech")
                        .HasColumnType("text[]");

                    b.Property<List<string>>("Related")
                        .HasColumnType("text[]");

                    b.Property<string>("WordId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "WordId" }, "IX_Senses_WordId");

                    b.ToTable("Senses");
                });

            modelBuilder.Entity("Danilvar.JMDict.Api.Entities.Word", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<Guid?>("JmdictDataId")
                        .HasColumnType("uuid")
                        .HasColumnName("JMDictDataId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "JmdictDataId" }, "IX_Words_JMDictDataId");

                    b.ToTable("Words");
                });

            modelBuilder.Entity("Danilvar.JMDict.Api.Entities.Gloss", b =>
                {
                    b.HasOne("Danilvar.JMDict.Api.Entities.Sense", null)
                        .WithMany("Glosses")
                        .HasForeignKey("SenseId");
                });

            modelBuilder.Entity("Danilvar.JMDict.Api.Entities.Kana", b =>
                {
                    b.HasOne("Danilvar.JMDict.Api.Entities.Word", null)
                        .WithMany("Kanas")
                        .HasForeignKey("WordId");
                });

            modelBuilder.Entity("Danilvar.JMDict.Api.Entities.Kanji", b =>
                {
                    b.HasOne("Danilvar.JMDict.Api.Entities.Word", null)
                        .WithMany("Kanjis")
                        .HasForeignKey("WordId");
                });

            modelBuilder.Entity("Danilvar.JMDict.Api.Entities.Sense", b =>
                {
                    b.HasOne("Danilvar.JMDict.Api.Entities.Word", null)
                        .WithMany("Senses")
                        .HasForeignKey("WordId");
                });

            modelBuilder.Entity("Danilvar.JMDict.Api.Entities.Word", b =>
                {
                    b.HasOne("Danilvar.JMDict.Api.Entities.JmdictData", "JmdictData")
                        .WithMany("Words")
                        .HasForeignKey("JmdictDataId");

                    b.Navigation("JmdictData");
                });

            modelBuilder.Entity("Danilvar.JMDict.Api.Entities.JmdictData", b =>
                {
                    b.Navigation("Words");
                });

            modelBuilder.Entity("Danilvar.JMDict.Api.Entities.Sense", b =>
                {
                    b.Navigation("Glosses");
                });

            modelBuilder.Entity("Danilvar.JMDict.Api.Entities.Word", b =>
                {
                    b.Navigation("Kanas");

                    b.Navigation("Kanjis");

                    b.Navigation("Senses");
                });
#pragma warning restore 612, 618
        }
    }
}
